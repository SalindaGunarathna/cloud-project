apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
    # Rolling Update Strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1     # Maximum pods unavailable during update
      maxSurge: 1           # Extra pods during rolling update
  minReadySeconds: 10       # Wait time before considering pod ready
  revisionHistoryLimit: 5   # Keep deployment history for rollbacks

  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
        - name: api-gateway
          image: salindadocker/project-api-gateway:latest
#          imagePullPolicy: IfNotPresent
          imagePullPolicy: Always
          ports:
          - containerPort: 9000
            name: http

          
          # Health Probes
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 40  # Gateway might need more startup time
          
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 20"]  # Longer for gateway
          env:
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI
              valueFrom:
                configMapKeyRef:
                  key: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI
                  name: api-gateway-config
            - name: LOKI_URL
              valueFrom:
                configMapKeyRef:
                  key: LOKI_URL
                  name: common-config
            - name: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
                  name: common-config
            - name: PRODUCT_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  key: PRODUCT_SERVICE_URL
                  name: common-config
            - name: ORDER_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  key: ORDER_SERVICE_URL
                  name: common-config
            - name: INVENTORY_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  key: INVENTORY_SERVICE_URL
                  name: common-config

            # Enable Spring Boot health probes
            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_READINESSSTATE_ENABLED
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
data:
  SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: "http://keycloak.default.svc.cluster.local:8080/realms/spring-microservices-security-realm"