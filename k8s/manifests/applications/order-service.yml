apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: order-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1     # Maximum pods unavailable during update
      maxSurge: 1           # Extra pods during rolling update
  minReadySeconds: 10       # Wait time before considering pod ready
  revisionHistoryLimit: 5   # Keep deployment history for rollbacks

  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
        - name: order-service
          image: salindadocker/project-order-service:latest
          #          imagePullPolicy: IfNotPresent
          imagePullPolicy: Always
                  # Resource Management
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          
          # Health Probes
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          
          # Startup Probe (for slow-starting apps)
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30  # Allow up to 5 minutes for startup
          
          # Graceful Shutdown
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
          env:
            - name: SPRING_KAFKA_BOOTSTRAP-SERVERS
              valueFrom:
                configMapKeyRef:
                  key: SPRING_KAFKA_BOOTSTRAP-SERVERS
                  name: common-config
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  key: SPRING_DATASOURCE_URL
                  name: order-service-config
            - name: LOKI_URL
              valueFrom:
                configMapKeyRef:
                  key: LOKI_URL
                  name: common-config
            - name: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: MANAGEMENT_ZIPKIN_TRACING_ENDPOINT
                  name: common-config
            - name: INVENTORY_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  key: INVENTORY_SERVICE_URL
                  name: common-config
            - name: SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL
              valueFrom:
                configMapKeyRef:
                  key: SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL
                  name: order-service-config

            - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
              value: "true"
            - name: MANAGEMENT_HEALTH_READINESSSTATE_ENABLED
              value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
data:
  SPRING_DATASOURCE_URL: "jdbc:mysql://mysql.default.svc.cluster.local:3306/order_service"
  SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema-registry.default.svc.cluster.local:8081"